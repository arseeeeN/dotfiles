#!/bin/nu --config ~/.config/nushell/config.nu --env-config ~/.config/nushell/env.nu
# TODO: Remove the config flags in the shebang as
#       soon as nushell fixes the default configs

def "main" [] {
}

# Deploy the war file with the given config and start Catalina in the current window
def "main run" [
    config: string = "default" # Profile for the tomcat deployment
    --jdpa # Start Catalina under JDPA debugger
] {
    deploy $config
    run
}

# Deploy the war file with the given config and start Catalina in a debugger
def "main debug" [config: string = "default"] {
    deploy $config
    debug
}

# Deploy the war file to tomcat with the given config
def "main deploy" [config: string = "default"] {
    deploy $config
}

# Create a deployment config and add it to your config folder
def "main config add" [
    name: string
    path: string
    --project_path_relative (-r): string
    --project_path_absolute (-a): string
] {
    let config_folder = $env.HOME | path join ".config" "tomcatctl"
    if not ($config_folder | path exists) {
        mkdir $config_folder
    }
    mut config = { path: $path }
    if $project_path_relative != null {
        $config.project_path_relative = $project_path_relative
    }
    if $project_path_absolute != null {
        $config.project_path_absolute = $project_path_absolute
    }
    $config | to toml | save ($config_folder | path join $"($name).toml")
}

# Remove a config file from your config folder
def "main config rm" [name: string] {
    let config_folder = $env.HOME | path join ".config" "tomcatctl"
    rm ($config_folder | path join $"($name).toml")
}

# List all configs in your config folder
def "main config list" [] {
    ls ($env.HOME | path join ".config" "tomcatctl")
    | where type == file
    | get name
    # TODO: Make this prettier so that the files get read and the path etc. get printed too
    | each {|| path parse | get stem }
}

def run [] {
    sh -c $"(get_catalina_sh) run"
}

def jpda [] {
    sh -c $"(get_catalina_sh) jpda start"
}

def debug [] {
    sh -c $"(get_catalina_sh) debug"
}

def deploy [config: string] {
    check_env
    let config_folder = $env.HOME | path join ".config" "tomcatctl"
    # TODO: Add some logic that checks if the config string is default. If it is,
    # and the file doesn't exist then use the fallback. If any other value is given
    # force the user to supply a valid config name where the file exists.
    let config_file = $config_folder | path join $"($config).toml"
    let config_data = if ($config_file | path exists) {
        open $config_file
    } else {
        { path: "/dev" }
    }
    let filename = (
        $config_data.path
        | str trim -c "/"
        | str replace "/" "#"
    )
    let path = (
        $config_data.path
        | str trim -c "/"
        | "/" + $in
    )
    let project_base = if "project_path_absolute" in $config_data {
        $config_data.project_path_absolute
    } else if "project_path_relative" in $config_data {
        $config_data.project_path_relative
    } else {
        pwd | to text | str trim
    }
    let artifact_path = ($project_base | path join "target" "*.war")
    let docBase = (
        globpath $artifact_path
        | if ($in | is-empty) {
            print -e $"Failed to match the path: \"($artifact_path)\""
            exit 1
        } else { $in }
        | path parse
        | $"($in.parent)\/($in.stem)"
    )
    let context_xml = ({
        tag: "Context"
        attributes: {
            path: $path
            docBase: $docBase
        }
    } | to xml)
    let deploy_folder = ($env.CATALINA_HOME | path join "conf" "Catalina" "localhost")
    if ($deploy_folder | path exists) {
        let context_file_path = ($deploy_folder | path join $"($filename).xml")
        $context_xml | save -f $context_file_path
        print "Config content:" ($context_xml) "Config path:" $context_file_path
    } else {
        print -e $"Can't find Catalina config folder at path: \"($deploy_folder)\""
    }
}

def check_env [] {
    if ("CATALINA_HOME" not-in $env
    or ($env.CATALINA_HOME | is-empty)
    or (not ($env.CATALINA_HOME | path exists))) {
        print -e "Environment variable CATALINA_HOME needs to be set and exist"
        exit 1
    }
}

def get_catalina_sh [] {
    if not (which catalina.sh | is-empty) {
        "catalina.sh"
    } else {
        check_env
        $env.CATALINA_HOME | path join "bin" "catalina.sh"
    }
}
